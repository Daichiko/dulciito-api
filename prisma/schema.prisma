// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  CREACION_PEDIDO
  ESPERA_DISPONIBILIDAD
  CANCELADO_POR_VENDEDOR
  PAGO_PENDIENTE
  PROCESANDO
  ENVIADO
  RECIBIDO
}

model Articulos {
  id          String    @id @default(uuid())
  nombre      String
  descripcion String?
  cantidad    Decimal   @default(0)
  tipoMedida  String
  precio      Decimal
  recetas     Recetas[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Platos {
  id             String           @id @default(uuid())
  nombre         String
  descripcion    String?
  recetas        Recetas[]
  pedidos        Pedidos_platos[]
  costoCalculado Decimal          @default(0) // Campo para almacenar el costo calculado del plato
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Recetas {
  articuloId            String
  articulo              Articulos @relation(fields: [articuloId], references: [id], onDelete: Cascade)
  platoId               String
  plato                 Platos    @relation(fields: [platoId], references: [id], onDelete: Cascade)
  cantidadUtilizada     Decimal
  unidadMedidaUtilizada String

  @@id([articuloId, platoId])
}

model Pedidos_platos {
  plato   Platos @relation(fields: [platoId], references: [id])
  platoId String

  pedido   Pedidos @relation(fields: [pedidoId], references: [id])
  pedidoId String

  @@id([platoId, pedidoId])
}

model Pedidos {
  id          String           @id @default(uuid())
  pedidos     Pedidos_platos[]
  usuario     Usuarios         @relation(fields: [usuarioId], references: [id])
  usuarioId   String
  cliente     Clientes         @relation(fields: [clienteId], references: [id])
  clienteId   String
  fechaPedido DateTime         @default(now())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Clientes {
  id        String   @id @default(uuid())
  nombre    String   @unique
  correo    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pedidosIngresados Pedidos[]

  @@index([correo])
}

model Usuarios {
  id                String          @id @default(uuid())
  nombre            String          @unique
  correo            String          @unique
  contrase√±a       String
  fechaCreacion     DateTime        @default(now())
  UserRoles         UsuariosRoles[]
  pedidosIngresados Pedidos[]

  @@index([correo])
}

model Roles {
  id          String          @id @default(uuid())
  name        String          @unique
  description String?
  UserRoles   UsuariosRoles[]
}

model UsuariosRoles {
  usuarios  Usuarios @relation(fields: [usuarioId], references: [id])
  usuarioId String

  Roles  Roles  @relation(fields: [roleId], references: [id])
  roleId String

  @@id([usuarioId, roleId])
}
